[{"C:\\Users\\mathi\\Documents\\buscaminas\\src\\index.tsx":"1","C:\\Users\\mathi\\Documents\\buscaminas\\src\\components\\App\\index.tsx":"2","C:\\Users\\mathi\\Documents\\buscaminas\\src\\utils\\index.ts":"3","C:\\Users\\mathi\\Documents\\buscaminas\\src\\constants\\index.ts":"4","C:\\Users\\mathi\\Documents\\buscaminas\\src\\types\\index.ts":"5","C:\\Users\\mathi\\Documents\\buscaminas\\src\\components\\NumberDisplay\\index.tsx":"6","C:\\Users\\mathi\\Documents\\buscaminas\\src\\components\\Cell\\index.tsx":"7"},{"size":187,"mtime":1608284554825,"results":"8","hashOfConfig":"9"},{"size":1051,"mtime":1609025581024,"results":"10","hashOfConfig":"9"},{"size":1507,"mtime":1609027164059,"results":"11","hashOfConfig":"9"},{"size":90,"mtime":1609022019775,"results":"12","hashOfConfig":"9"},{"size":271,"mtime":1609023949692,"results":"13","hashOfConfig":"9"},{"size":332,"mtime":1608286926449,"results":"14","hashOfConfig":"9"},{"size":742,"mtime":1609027155820,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},"bpa1gx",{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"18"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"18"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"18"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"33"},"C:\\Users\\mathi\\Documents\\buscaminas\\src\\index.tsx",[],["34","35"],"C:\\Users\\mathi\\Documents\\buscaminas\\src\\components\\App\\index.tsx",["36"],"import React, { useState } from 'react';\r\nimport { generateCels } from '../../utils/index';\r\nimport NumberDisplay from '../NumberDisplay';\r\nimport Cell from '../Cell'\r\nimport './App.scss';\r\n\r\nconst App: React.FC = () => {\r\n\r\n    const [cells, setCells] = useState(generateCels());\r\n\r\n    const renderCells = (): React.ReactNode => {\r\n        return cells.map(\r\n            (row, rowIndx) => row.map(\r\n                (cell, cellIndx) => <Cell\r\n                    key={`${rowIndx}-${cellIndx}`}\r\n                    state={cell.state}\r\n                    value={cell.value}\r\n                    row={rowIndx}\r\n                    col={cellIndx}\r\n                />\r\n            )\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"app\">\r\n            <div className=\"header\">\r\n                <NumberDisplay value={0} />\r\n                <div className=\"face\">ðŸ˜Š</div>\r\n                <NumberDisplay value={23} />\r\n            </div>\r\n            <div className=\"body\">{renderCells()}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default App;","C:\\Users\\mathi\\Documents\\buscaminas\\src\\utils\\index.ts",["37"],"import { maxHeaderSize } from 'http';\r\nimport { MAX_COLUMNS, MAX_ROWS, NUM_OF_BOMBS } from '../constants/index';\r\nimport { CellValue, CellState, CellType } from '../types/index';\r\n\r\nexport const generateCels = () => {\r\n\r\n    const cells: CellType[][] = [];\r\n\r\n    // generate cells\r\n    for (let rows = 0; rows < MAX_ROWS; rows++) {\r\n        cells.push([]);\r\n\r\n        for (let cols = 0; cols < MAX_COLUMNS; cols++) {\r\n            cells[rows].push({\r\n                value: CellValue.bomb,\r\n                state: CellState.visible, //Make this open later\r\n            });\r\n        };\r\n    };\r\n\r\n    // randomly place 10 bombs\r\n    let bombsPlaced = 0;\r\n\r\n    while (bombsPlaced < NUM_OF_BOMBS) {\r\n        const randomRow = Math.floor(Math.random() * MAX_ROWS);\r\n        const randomCol = Math.floor(Math.random() * MAX_COLUMNS);\r\n\r\n        const currentCell = cells[randomRow][randomCol];\r\n\r\n        if (currentCell.value !== CellValue.bomb) {\r\n            // cells = cells.map((row, rowIndx) => row.map((col, colIndx) => {\r\n            //     if (randomRow === rowIndx && randomCol === colIndx) {\r\n            //         return {\r\n            //             ...cell,\r\n            //             value: CellValue.bomb\r\n            //         }\r\n            //     }\r\n            // }))\r\n\r\n            cells[randomRow][randomCol] = {\r\n                ...cells[randomRow][randomCol],\r\n                value: CellValue.bomb\r\n            }\r\n            bombsPlaced++;\r\n        }\r\n    }\r\n\r\n    return cells;\r\n};","C:\\Users\\mathi\\Documents\\buscaminas\\src\\constants\\index.ts",[],"C:\\Users\\mathi\\Documents\\buscaminas\\src\\types\\index.ts",[],"C:\\Users\\mathi\\Documents\\buscaminas\\src\\components\\NumberDisplay\\index.tsx",[],"C:\\Users\\mathi\\Documents\\buscaminas\\src\\components\\Cell\\index.tsx",["38"],"import React, { ReactNode } from 'react';\r\nimport { CellState, CellValue } from '../../types';\r\nimport './Cell.scss';\r\n\r\ninterface CellProps {\r\n    state: CellState,\r\n    value: CellValue,\r\n    row: number,\r\n    col: number\r\n}\r\n\r\nconst Cell: React.FC<CellProps> = ({ state, value, row, col }) => {\r\n\r\n    const renderContent = (): React.ReactNode => {\r\n        if (state === CellState.visible) {\r\n\r\n            value === CellValue.bomb && <div className=\"bomb\">ðŸ’£</div>\r\n\r\n        } else if (state === CellState.flagged) {\r\n\r\n        } else return null;\r\n    }\r\n\r\n    return (\r\n        <div className={`cell ${state === CellState.visible ? 'visible' : ''}`}>\r\n            {renderContent()}\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Cell;",{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":9,"column":19,"nodeType":"45","messageId":"46","endLine":9,"endColumn":27},{"ruleId":"43","severity":1,"message":"47","line":1,"column":10,"nodeType":"45","messageId":"46","endLine":1,"endColumn":23},{"ruleId":"43","severity":1,"message":"48","line":1,"column":17,"nodeType":"45","messageId":"46","endLine":1,"endColumn":26},"no-native-reassign",["49"],"no-negated-in-lhs",["50"],"@typescript-eslint/no-unused-vars","'setCells' is assigned a value but never used.","Identifier","unusedVar","'maxHeaderSize' is defined but never used.","'ReactNode' is defined but never used.","no-global-assign","no-unsafe-negation"]